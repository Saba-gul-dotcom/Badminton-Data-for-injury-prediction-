
Injury Prediction Model for Badminton Players Using RNN with LSTM
=================================================================

This document provides a step-by-step guide to implementing an injury prediction model using a Recurrent Neural Network (RNN) with Long Short-Term Memory (LSTM) layers. The model is designed to predict injury risks in badminton players based on historical and current data.

1. Environment Setup
---------------------
Before running the code, ensure you have Python installed on your machine. You will also need to install the following libraries:

- TensorFlow
- NumPy
- Pandas
- scikit-learn

You can install these libraries using pip:

```bash
pip install tensorflow numpy pandas scikit-learn
```

2. Data Preparation
--------------------
Your dataset should be in CSV format and include the following columns:
- Player_ID
- Age
- Height_cm
- Weight_kg
- Previous_Injuries
- Matches_Played
- Training_Hours_Per_Week
- Training_Intensity
- Injury_Type
- Recovery_Days
- Physical_Condition_Score
- Singles_Doubles
- Injury_Risk

Load your dataset into a Pandas DataFrame:

```python
import pandas as pd

# Replace 'your_dataset.csv' with the path to your dataset file
df = pd.read_csv('your_dataset.csv')
```

3. Preprocessing the Data
--------------------------
Preprocess the data to normalize numerical features and encode categorical features:

```python
from sklearn.preprocessing import StandardScaler, LabelEncoder

scaler = StandardScaler()
df[['Age', 'Height_cm', 'Weight_kg', 'Previous_Injuries', 'Matches_Played', 
    'Training_Hours_Per_Week', 'Recovery_Days', 'Physical_Condition_Score']] = scaler.fit_transform(
    df[['Age', 'Height_cm', 'Weight_kg', 'Previous_Injuries', 'Matches_Played', 
        'Training_Hours_Per_Week', 'Recovery_Days', 'Physical_Condition_Score']])

label_encoder = LabelEncoder()
df['Training_Intensity'] = label_encoder.fit_transform(df['Training_Intensity'])
df['Injury_Type'] = label_encoder.fit_transform(df['Injury_Type'])
df['Singles_Doubles'] = label_encoder.fit_transform(df['Singles_Doubles'])
```

Next, create sequences to capture temporal dependencies:

```python
import numpy as np

X = []
y = []
sequence_length = 10

for i in range(len(df) - sequence_length):
    X.append(df.iloc[i:i + sequence_length].values)
    y.append(df['Injury_Risk'].iloc[i + sequence_length])

X = np.array(X)
y = np.array(y)
```

4. Model Implementation
------------------------
Define the RNN model with LSTM layers:

```python
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(X.shape[1], X.shape[2])))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
```

5. Training the Model
----------------------
Split the data into training and testing sets, then train the model:

```python
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))
```

6. Evaluating the Model
------------------------
Evaluate the model using accuracy, precision, recall, and F1-score:

```python
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

y_pred = (model.predict(X_test) > 0.5).astype(int)
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
print(f'Precision: {precision_score(y_test, y_pred)}')
print(f'Recall: {recall_score(y_test, y_pred)}')
print(f'F1 Score: {f1_score(y_test, y_pred)}')
```

7. Saving and Loading the Model
-------------------------------
Save the trained model for future use:

```python
model.save('injury_prediction_model.h5')
```

To load the model later:

```python
from tensorflow.keras.models import load_model

loaded_model = load_model('injury_prediction_model.h5')
```

8. Conclusion
-------------
You can customize this model by experimenting with different architectures, hyperparameters, and feature sets. This guide provides a solid foundation for implementing an injury prediction model, which can be extended and adapted for various sports or applications.

